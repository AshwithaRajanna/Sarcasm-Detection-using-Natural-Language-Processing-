# -*- coding: utf-8 -*-
"""Minor_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J-FoLuTcS3T-9WT4_JOy61OP5iCwR-9f
"""

import pandas as pd
reddit_data =pd.read_csv( "/content/drive/MyDrive/train-balanced-sarcasm.csv")

reddit_data.head(6)

import nltk
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer, WordNetLemmatizer

reddit_data.info()

reddit_data.info(memory_usage="deep")

reddit_data.describe()

reddit_data.shape

text_column = 'comment'

# Tokenization
import nltk
nltk.download('punkt')
reddit_data[text_column] = reddit_data[text_column].apply(lambda x: nltk.word_tokenize(str(x).lower()))
print("After Tokenization:")
print(reddit_data.head())

# Stop Word Removal
import nltk
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer, WordNetLemmatizer
nltk.download('stopwords')
stop_words = set(stopwords.words('english'))
reddit_data[text_column] = reddit_data[text_column].apply(lambda x: [word for word in x if word not in stop_words])
print("\nAfter Stop Word Removal:")
print(reddit_data.head())

# Stemming
stemmer = PorterStemmer()
reddit_data[text_column] = reddit_data[text_column].apply(lambda x: [stemmer.stem(word) for word in x])
print("\nAfter Stemming:")
print(reddit_data.head())



# Lemmatization
nltk.download('wordnet')
lemmatizer = WordNetLemmatizer()
reddit_data[text_column] = reddit_data[text_column].apply(lambda x: [lemmatizer.lemmatize(word) for word in x])
print("\nAfter Lemmatization:")
print(reddit_data.head())

# Feature Engineering and Representation
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from gensim.models import Word2Vec
import spacy

# Lexical features - Length of comments
reddit_data['comment_length'] = [len(comment) for comment in reddit_data['comment']]
print(reddit_data.head())

import numpy as np

# Initialize and train the Word2Vec model
word2vec_model = Word2Vec(sentences=reddit_data['comment'], min_count=1, vector_size=100, window=5)

# Define a function to calculate the average word vector for a comment
def calculate_avg_word_vector(comment):
    word_vectors = []  # Initialize a list to store word vectors
    for word in comment:
        if word in word2vec_model.wv:  # Check if word is in vocabulary
            word_vector = word2vec_model.wv[word]  # Get the word vector
            word_vectors.append(word_vector)  # Add the word vector to the list
    if word_vectors:  # Check if there are word vectors available
        avg_vector = np.mean(word_vectors, axis=0)  # Calculate the average word vector
        return avg_vector
    else:
        return np.zeros(word2vec_model.vector_size)  # Return zero vector if no word vectors found

# Apply the function to calculate average word vectors for each comment
reddit_data['avg_word_vector'] = reddit_data['comment'].apply(calculate_avg_word_vector)

# Print the DataFrame with the new 'avg_word_vector' column
print(reddit_data.head())

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, Conv1D, GlobalMaxPooling1D, Dense, Dropout
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

X = reddit_data['comment'].astype(str)
y = reddit_data['label']

# Convert labels to numerical values
label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)

# Tokenize the input text and convert them into sequences
tokenizer = Tokenizer(num_words=10000)
tokenizer.fit_on_texts(X)
X_seq = tokenizer.texts_to_sequences(X)

# Pad the sequences to ensure uniform length
max_length = 100
X_pad = pad_sequences(X_seq, maxlen=max_length, padding='post')

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_pad, y, test_size=0.2, random_state=42)

# Build the CNN model
model = Sequential([
    Embedding(input_dim=10000, output_dim=100, input_length=max_length),
    Conv1D(filters=128, kernel_size=5, activation='relu'),
    GlobalMaxPooling1D(),
    Dense(units=64, activation='relu'),
    Dropout(0.5),
    Dense(units=1, activation='sigmoid')
])

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
history = model.fit(X_train, y_train, epochs=5, batch_size=64, validation_data=(X_test, y_test))

# After training your model
model.save_weights('model_weights.h5')

import pandas as pd
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, Conv1D, GlobalMaxPooling1D, Dense, Dropout
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

# Assuming you have already loaded and preprocessed the data

# Load the trained model
model = Sequential([
    Embedding(input_dim=10000, output_dim=100, input_length=100),
    Conv1D(filters=128, kernel_size=5, activation='relu'),
    GlobalMaxPooling1D(),
    Dense(units=64, activation='relu'),
    Dropout(0.5),
    Dense(units=1, activation='sigmoid')
])

model.load_weights('/content/model_weights.h5')  # Load the trained model weights

# Load the tokenizer used for preprocessing
tokenizer = Tokenizer(num_words=10000)
tokenizer.fit_on_texts(reddit_data['comment'].astype(str))

# Function to preprocess user input and make predictions
def predict_sarcasm(comment):
    sequence = tokenizer.texts_to_sequences([comment])
    padded_sequence = pad_sequences(sequence, maxlen=100, padding='post')
    prediction = model.predict(padded_sequence)[0][0]
    if prediction >= 0.5:
        return "Sarcastic"
    else:
        return "Not Sarcastic"

# User input
user_input = input("Enter your comment: ")

# Make prediction
prediction = predict_sarcasm(user_input)
print("Prediction:", prediction)